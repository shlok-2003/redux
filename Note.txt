Redux is a state management library for JavaScript applications. It allows you to manage the state of your application in a centralized 
location called the store.

The basic idea behind Redux is that your application’s state is represented by a single object called the store. The store is read-only, 
which means you can’t directly modify its state. Which means that the store is immutable. The only way to update the state of the store
is by assigning new objects or values to the existing store.

This assignment operation is done with the help of a function called a reducer. A reducer is a pure function that takes the current state
of the store and an action as arguments, and returns a new state. The action is a plain JavaScript object that describes the change.

For the time, a pure function is a function which returns the same output for the same input and does not have any side effects. The pure
functions are well explained in the lectures link https://www.youtube.com/watch?v=poQXNp9ItL4&t=1959s&ab_channel=ProgrammingwithMosh

When you dispatch an action to the store, the store calls a reducer function with the current state of the store and the action as arguments. 
The reducer function takes the current state and the action, applies the changes described by the action to the state, and returns a new state 
object. It is shown below

pseudo code for the reducer function:
    function reducer(state, action) {
        const updated = { ...state };           // create a copy of the state as we can't modify the state directly (immutable)

        //? Now perform the action on the updated state and return the updated state
        return updated;
    }

Reducers are kind of event handlers.

There are two functions in redux:
    1. useSelector() - It is used to get the state from the store
    2. useDispatch() - It is used to dispatch the action to the store (as shown above)

The useSelector() function is used to get the state from the store. It takes a function as an argument, which is called the selector function.
The selector function takes the current state of the store as an argument and returns the data that you want to extract from the state.

Now, 
create a store using the createStore() function from the redux library. The createStore() function takes a reducer function as an argument and
returns a store object.

We can use subscribe() method of the store to listen to the changes (console it) every time when some actions are performed. The subscribe() method takes a callback function as an argument,

Here’s a summary of the key concepts in Redux:

1. The store is the single source of truth for your application’s state.

2. Actions are plain JavaScript objects that describe changes to the state.

3. Reducers are functions that take the current state and an action, and return a new state.

4. Dispatching an action to the store triggers the store to update its state by calling the reducer function with the current state and action.


In a social media app, you can use Redux to manage the state of the application. Some examples of how Redux can be useful in social media app:

1. Authentication state: Redux can store the user’s authentication state and allow the app to retrieve it from any component. This can include 
the user’s login status, token, and other related information.

2. User profile information: Redux can store the user’s profile information, such as name, email, and profile picture. This data can be easily 
accessed by any component, and any changes to the profile can be updated in real-time.

3. Posts and comments: Redux can store the posts and comments made by the user or their friends. This allows the app to display them in the 
correct order and update them in real-time.

4. Notifications: Redux can store the user’s notification state and allow the app to retrieve it from any component. This includes new messages, 
friend requests, or other relevant notifications.

By using Redux, you can simplify the management of the state of the application and make it more predictable. It also allows for better 
separation of concerns, making it easier to maintain and scale the app over time.